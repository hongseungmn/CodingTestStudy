1. 슬라이딩 윈도우 (Sliding Window)
설명
배열에서 고정 크기 또는 가변 크기의 연속된 부분 배열을 다룰 때 사용하는 기법.
윈도우를 배열 위에서 슬라이드하면서 효율적으로 연산.
활용 예
최대/최소 합 구하기 (k 길이의 서브배열).
문자열의 아나그램 탐색.
연속된 조건을 만족하는 부분 배열의 길이 계산.
시간 복잡도
O(n): 윈도우의 양 끝을 조정하며 한 번만 순회.

2. 투 포인터 (Two Pointers)
설명
두 개의 포인터를 배열 위에서 움직이며 특정 조건을 만족하는 값을 탐색.
보통 정렬된 배열에서 활용.
활용 예
정렬된 배열에서 두 수의 합 찾기 (Two Sum).
두 배열 병합.
중복 제거 및 정렬된 배열의 길이 계산.
시간 복잡도
O(n) 또는 O(n log n) (정렬이 필요한 경우).

3. 누적합 (Prefix Sum)
설명
배열의 구간 합을 빠르게 계산하기 위한 기법.
새로운 배열에 각 위치까지의 합을 저장하여 구간 합 계산을 O(1)로 처리.
활용 예
구간 합/차 계산.
연속적인 부분 배열의 합 문제.
특정 조건을 만족하는 구간 탐색.
시간 복잡도
O(n) (구간 합 계산은 O(1)).

4. 차분 배열 (Difference Array)
설명
배열의 특정 구간 값을 빠르게 업데이트하는 데 사용.
특정 구간 [l, r]을 한 번의 작업으로 업데이트 가능.
활용 예
구간 업데이트가 많은 문제.
배열 값의 변화 추적.
시간 복잡도
O(1) (구간 업데이트).

5. 이분 탐색 (Binary Search)
설명
정렬된 배열에서 특정 값을 빠르게 찾는 알고리즘.
중간 값을 기준으로 탐색 범위를 절반씩 줄임.
활용 예
특정 값 또는 조건을 만족하는 최소/최대 값 찾기.
정렬된 배열에서 중복 값의 범위 탐색.
시간 복잡도
O(log n).

6. 정렬 알고리즘 (Sorting)
설명
문제를 단순화하거나 특정 조건을 만족시키기 위해 정렬을 활용.
효율적인 정렬 알고리즘으로는 병합 정렬, 힙 정렬, 퀵 정렬 등이 있음.
활용 예
중복 값 제거.
k번째 최소/최대 값 찾기.
정렬 기반의 최적화 문제(예: 활동 선택 문제).
시간 복잡도
O(n log n).

7. 해시 맵 및 해시 셋 (HashMap, HashSet)
설명
배열에서 특정 값을 빠르게 조회하거나 빈도수를 저장하기 위한 자료구조.
활용 예
중복 검사.
두 수의 합 (Two Sum).
배열에서 가장 많이 등장한 값 찾기.
시간 복잡도
O(1) (해시 기반 조회 및 삽입).

8. 모스 알고리즘 (Mo's Algorithm)
설명
구간 쿼리 문제(예: 특정 범위에서의 합, 최댓값, 최솟값 등)를 효율적으로 처리.
쿼리를 정렬하여 중복 연산을 줄임.
활용 예
구간 쿼리 최적화.
특정 범위에서 고유한 값의 개수 계산.
시간 복잡도
O((n + q) * √n), 여기서 q는 쿼리 개수.

9. 세그먼트 트리 (Segment Tree)
설명
배열에서 구간 쿼리와 구간 업데이트를 빠르게 처리.
트리 구조를 이용하여 각 구간의 정보를 저장.
활용 예
구간 합, 최댓값, 최솟값 쿼리.
구간 값 변경 문제.
시간 복잡도
O(log n) (구간 연산 및 업데이트).

10. 펜윅 트리 (Fenwick Tree, Binary Indexed Tree)
설명
세그먼트 트리보다 간단한 구현으로 구간 합을 처리.
배열의 누적합을 계산하고 업데이트.
활용 예
구간 합 계산.
배열 업데이트.
시간 복잡도
O(log n) (구간 연산 및 업데이트).

11. 카데인 알고리즘 (Kadane’s Algorithm)
설명
연속된 부분 배열의 최대 합을 효율적으로 찾는 알고리즘.
부분 합을 누적하며 음수가 되면 초기화.
활용 예
최대 서브 배열 합 문제.
시간 복잡도
O(n).

12. 정렬된 배열의 병합 (Merge Two Sorted Arrays)
설명
두 개의 정렬된 배열을 하나로 병합하는 기법.
활용 예
다중 정렬된 리스트 병합.
k개의 정렬된 배열 병합.
시간 복잡도
O(n + m), 여기서 n과 m은 두 배열의 크기.

13. 스택 및 큐 활용
설명
배열 기반의 스택이나 큐를 이용해 연속된 값 처리.
예: 단조 증가 스택.
활용 예
주식 가격 문제(스팬 계산).
다음 큰 요소 찾기 (Next Greater Element).
시간 복잡도
O(n) (스택 연산).

14. 비트마스크 (Bitmask)
설명
배열에서 부분 집합이나 상태를 효율적으로 표현하기 위해 비트 연산을 활용.
활용 예
부분 집합 합 문제.
조합 최적화 문제.
시간 복잡도
O(2^n) (가능한 모든 조합 탐색).